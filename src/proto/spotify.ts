/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: proto/spotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class SendSongRequestRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set data(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        data?: string;
    }): SendSongRequestRequest {
        const message = new SendSongRequestRequest({});
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            data?: string;
        } = {};
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.data.length)
            writer.writeString(1, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendSongRequestRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendSongRequestRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.data = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SendSongRequestRequest {
        return SendSongRequestRequest.deserialize(bytes);
    }
}
export class SendSpotifyRequestResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        status?: number;
        message?: string;
        data?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set status(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set data(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        status?: number;
        message?: string;
        data?: string;
    }): SendSpotifyRequestResponse {
        const message = new SendSpotifyRequestResponse({});
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            status?: number;
            message?: string;
            data?: string;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status != 0)
            writer.writeUint32(1, this.status);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.data.length)
            writer.writeString(3, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendSpotifyRequestResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendSpotifyRequestResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readUint32();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    message.data = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SendSpotifyRequestResponse {
        return SendSpotifyRequestResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedSpotifyServiceService {
    static definition = {
        SendEvent: {
            path: "/SpotifyService/SendEvent",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SendSongRequestRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SendSongRequestRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SendSpotifyRequestResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SendSpotifyRequestResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract SendEvent(call: grpc_1.ServerUnaryCall<SendSongRequestRequest, SendSpotifyRequestResponse>, callback: grpc_1.sendUnaryData<SendSpotifyRequestResponse>): void;
}
export class SpotifyServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedSpotifyServiceService.definition, "SpotifyService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    SendEvent: GrpcUnaryServiceInterface<SendSongRequestRequest, SendSpotifyRequestResponse> = (message: SendSongRequestRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SendSpotifyRequestResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SendSpotifyRequestResponse>, callback?: grpc_1.requestCallback<SendSpotifyRequestResponse>): grpc_1.ClientUnaryCall => {
        return super.SendEvent(message, metadata, options, callback);
    };
}
